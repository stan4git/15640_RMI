package service;

import java.lang.reflect.Method;

import message.ExceptionMessage;
import message.MethodInvocationMessage;
import message.ReturnMessage;
import server.Remote;
import server.RemoteRef;
import server.RemoteStub;
import shareFolder.ZipCodeList;
import shareFolder.ZipCodeServer;
import util.CommunicationUtil;
import util.Util;
import exception.RemoteException;
/**
 * This is automatic generated by RMIC.
 *
 */
public class ZipCodeServerImpl_Stub implements Remote, ZipCodeServer, RemoteStub {
	RemoteRef ref;
	
	public ZipCodeServerImpl_Stub(RemoteRef r) {
		this.ref = r;
	}
	
	@Override
	public void initialise(ZipCodeList newlist) {
		Class<?>[] types = new Class<?>[1];
		types[0] = ZipCodeList.class;
		Method method;
		try {
			method = this.getClass().getMethod("initialise", types);
		} catch (NoSuchMethodException | SecurityException e) {
			System.out.println("No such method!");
			return;
		}
		int key = (int) Util.computeMethodHash(method);
		Object[] params = new Object[1];
		params[0] = newlist;
		MethodInvocationMessage message = new MethodInvocationMessage(ref.getInstanceID(), key, params);
		Object obj = null;
		
		try {
			try {
				CommunicationUtil.sendMessage(ref.getHost(), ref.getPort(), message);
			} catch (exception.RemoteException e) {
				System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
				e.printStackTrace();
			}
			try {
				obj = CommunicationUtil.receiveMessage(ref.getHost(), ref.getPort());
			} catch (exception.RemoteException e) {
				System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
				e.printStackTrace();
			}
			if(obj instanceof ExceptionMessage)
				throw (RemoteException)((ExceptionMessage)obj).get();
		} catch (RemoteException e) {
			System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
			return;
		}
		return;
	}

	@Override
	public String find(String city) {
		Class<?>[] types = new Class<?>[1];
		types[0] = String.class;
		Method method;
		try {
			method = this.getClass().getMethod("find", types);
		} catch (NoSuchMethodException | SecurityException e) {
			System.out.println("No such method!");
			return "null";
		}
		int key = (int) Util.computeMethodHash(method);
		Object[] params = new Object[1];
		params[0] = city;
		MethodInvocationMessage message = new MethodInvocationMessage(ref.getInstanceID(), key, params);
		Object obj = null;
		
		try {
			try {
				CommunicationUtil.sendMessage(ref.getHost(), ref.getPort(), message);
			} catch (exception.RemoteException e) {
				System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
				e.printStackTrace();
			}
			try {
				obj = CommunicationUtil.receiveMessage(ref.getHost(), ref.getPort());
			} catch (exception.RemoteException e) {
				System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
				e.printStackTrace();
			}
			if(obj instanceof ExceptionMessage)
				throw (RemoteException)((ExceptionMessage)obj).get();
		} catch (RemoteException e) {
			System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
			return "null";
		}
		return (String) ((ReturnMessage) obj).get();
	}

	@Override
	public ZipCodeList findAll() {
		Class<?>[] types = new Class<?>[0];
		Method method;
		try {
			method = this.getClass().getMethod("findAll", types);
		} catch (NoSuchMethodException | SecurityException e) {
			System.out.println("No such method!");
			return null;
		}
		int key = (int) Util.computeMethodHash(method);
		Object[] params = new Object[0];
		MethodInvocationMessage message = new MethodInvocationMessage(ref.getInstanceID(), key, params);
		Object obj = null;
		
		try {
			try {
				CommunicationUtil.sendMessage(ref.getHost(), ref.getPort(), message);
			} catch (exception.RemoteException e) {
				System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
				e.printStackTrace();
			}
			try {
				obj = CommunicationUtil.receiveMessage(ref.getHost(), ref.getPort());
			} catch (exception.RemoteException e) {
				System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
				e.printStackTrace();
			}
			if(obj instanceof ExceptionMessage)
				throw (RemoteException)((ExceptionMessage)obj).get();
		} catch (RemoteException e) {
			System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
			return null;
		}
		return (ZipCodeList) ((ReturnMessage) obj).get();
	}

	@Override
	public void printAll() {
		Class<?>[] types = new Class<?>[0];
		Method method;
		try {
			method = this.getClass().getMethod("printAll", types);
		} catch (NoSuchMethodException | SecurityException e) {
			System.out.println("No such method!");
			return;
		}
		int key = (int) Util.computeMethodHash(method);
		Object[] params = new Object[0];
		MethodInvocationMessage message = new MethodInvocationMessage(ref.getInstanceID(), key, params);
		Object obj = null;
		
		try {
			try {
				CommunicationUtil.sendMessage(ref.getHost(), ref.getPort(), message);
			} catch (exception.RemoteException e) {
				System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
				e.printStackTrace();
			}
			try {
				obj = CommunicationUtil.receiveMessage(ref.getHost(), ref.getPort());
			} catch (exception.RemoteException e) {
				System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
				e.printStackTrace();
			}
			if(obj instanceof ExceptionMessage)
				throw (RemoteException)((ExceptionMessage)obj).get();
		} catch (RemoteException e) {
			System.err.println(e.getType().toString() + ": "+ e.getCause().toString());
			return;
		}
		return;
	}

	@Override
	public RemoteRef getRR() {
		return this.ref;
	}


}
